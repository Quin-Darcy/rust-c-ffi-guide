// Define a module to encapsulate the raw FFI binding generated by bindgen.
// This isolates it from the rest of the crate and prevents namespace pollution.
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
mod bindings {
    include!(concat!(env!("OUT_DIR"), "/bindings.rs"));
}

fn main() {
    // Create the buffer
    let size = 20;
    let buffer = unsafe { bindings::allocate_buffer(size) };
    if buffer.is_null() {
        panic!("Null pointer returned");
    }

    // Call the FFI binding
    match unsafe { bindings::fill_buffer(buffer, size) }
    {
        n if n >= 0 => {
            println!("Buffer successfully filled");
        },
        _ => {
            println!("Invalid arguments were provided");
        }
    }

    // Free the buffer
    match unsafe { bindings::free_buffer(buffer)  }
    {
        0 => {
            println!("Buffer successfully freed");
        },
        _ => {
            println!("Failed to free buffer");
        }
    }
}
