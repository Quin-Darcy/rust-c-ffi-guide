// Define a module to encapsulate the raw FFI binding generated by bindgen.
// This isolates it from the rest of the crate and prevents namespace pollution.
#![allow(dead_code)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
mod bindings {
    include!(concat!(env!("OUT_DIR"), "/bindings.rs"));
}

fn main() {
    // Allocate a buffer
    let size = 20;
    let mut buffer = vec![0u8; size];
    
    // Get mutable pointer to the buffer's data
    let ptr = buffer.as_mut_ptr() as *mut ::std::os::raw::c_char;
    
    // Call the FFI binding
    let result = unsafe { 
        bindings::fill_buffer(ptr, size as ::std::os::raw::c_int) 
    };
    
    if result >= 0 {
        println!("Buffer successfully filled");
    } else {
        println!("Failed to fill buffer");
    }
}
